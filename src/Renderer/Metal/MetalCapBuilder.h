#pragma once

inline void utils_caps_builder(Renderer* pRenderer) {
	// for metal this is a case of going through each family and looking up the info off apple documentation
	// we start low and go higher, add things as we go
	// data from https://developer.apple.com/metal/Metal-Feature-Set-Tables.pdf

	memset(pRenderer->canShaderReadFrom, 0, sizeof(pRenderer->canShaderReadFrom));
	memset(pRenderer->canShaderWriteTo, 0, sizeof(pRenderer->canShaderWriteTo));
	memset(pRenderer->canColorWriteTo, 0, sizeof(pRenderer->canColorWriteTo));

#define CAN_SHADER_READ(x) pRenderer->canShaderReadFrom[TinyImageFormat_##x] = true;
#define CAN_SHADER_WRITE(x) pRenderer->canShaderWriteTo[TinyImageFormat_##x] = true;
#define CAN_COLOR_WRITE(x) pRenderer->canColorWriteTo[TinyImageFormat_##x] = true;
#ifndef TARGET_IOS

	if( [pRenderer->pDevice supportsFeatureSet: MTLFeatureSet_macOS_GPUFamily1_v1]) {
		CAN_SHADER_READ(A8_UNORM);
		CAN_SHADER_READ(R8_UNORM);
		CAN_SHADER_READ(R8_SNORM);
		CAN_COLOR_WRITE(R8_UNORM); // this has a subscript 8 which makes no sense
		CAN_COLOR_WRITE(R8_SNORM);

		CAN_SHADER_READ(R8G8_UNORM);
		CAN_SHADER_READ(R8G8_SNORM);
		CAN_SHADER_READ(R16_UNORM);
		CAN_SHADER_READ(R16_SNORM);
		CAN_SHADER_READ(R16_SFLOAT);
		CAN_COLOR_WRITE(R8G8_UNORM);
		CAN_COLOR_WRITE(R8G8_SNORM);
		CAN_COLOR_WRITE(R16_UNORM);
		CAN_COLOR_WRITE(R16_SNORM);
		CAN_COLOR_WRITE(R16_SFLOAT);

		CAN_SHADER_READ(R8G8B8A8_UNORM);
		CAN_SHADER_READ(R8G8B8A8_SNORM);
		CAN_SHADER_READ(R8G8B8A8_SRGB);
		CAN_SHADER_READ(B8G8R8A8_UNORM);
		CAN_SHADER_READ(B8G8R8A8_SRGB);
		CAN_SHADER_READ(R16G16_UNORM);
		CAN_SHADER_READ(R16G16_SNORM);
		CAN_SHADER_READ(R16G16_SFLOAT);
		CAN_SHADER_READ(R32_SFLOAT);
		CAN_SHADER_READ(A2R10G10B10_UNORM);
		CAN_SHADER_READ(A2B10G10R10_UNORM);
		CAN_SHADER_READ(B10G11R11_UFLOAT);
		CAN_SHADER_READ(E5B9G9R9_UFLOAT);
		CAN_COLOR_WRITE(R8G8B8A8_UNORM);
		CAN_COLOR_WRITE(R8G8B8A8_SNORM);
		CAN_COLOR_WRITE(R8G8B8A8_SRGB);
		CAN_COLOR_WRITE(B8G8R8A8_UNORM);
		CAN_COLOR_WRITE(B8G8R8A8_SRGB);
		CAN_COLOR_WRITE(R16G16_UNORM);
		CAN_COLOR_WRITE(R16G16_SNORM);
		CAN_COLOR_WRITE(R16G16_SFLOAT);
		CAN_COLOR_WRITE(R32_SFLOAT);
		CAN_COLOR_WRITE(A2R10G10B10_UNORM);
		CAN_COLOR_WRITE(A2B10G10R10_UNORM);
		CAN_COLOR_WRITE(B10G11R11_UFLOAT);

		CAN_SHADER_READ(R16G16B16A16_UNORM);
		CAN_SHADER_READ(R16G16B16A16_SNORM);
		CAN_SHADER_READ(R16G16B16A16_SFLOAT);
		CAN_SHADER_READ(R32G32_SFLOAT);
		CAN_COLOR_WRITE(R16G16B16A16_UNORM);
		CAN_COLOR_WRITE(R16G16B16A16_SNORM);
		CAN_COLOR_WRITE(R16G16B16A16_SFLOAT);
		CAN_COLOR_WRITE(R32G32_SFLOAT);

		CAN_SHADER_READ(R32G32B32A32_SFLOAT);
		CAN_COLOR_WRITE(R32G32B32A32_SFLOAT);

		CAN_SHADER_READ(D16_UNORM);
		CAN_SHADER_READ(D32_SFLOAT);
		CAN_SHADER_READ(S8_UINT);
		CAN_SHADER_READ(D24_UNORM_S8_UINT);
		CAN_SHADER_READ(D32_SFLOAT_S8_UINT);

		CAN_SHADER_READ(DXBC1_RGB_UNORM);
		CAN_SHADER_READ(DXBC1_RGB_SRGB);
		CAN_SHADER_READ(DXBC1_RGBA_UNORM);
		CAN_SHADER_READ(DXBC1_RGBA_SRGB);
		CAN_SHADER_READ(DXBC2_UNORM);
		CAN_SHADER_READ(DXBC2_SRGB);
		CAN_SHADER_READ(DXBC3_UNORM);
		CAN_SHADER_READ(DXBC3_SRGB);
		CAN_SHADER_READ(DXBC4_UNORM);
		CAN_SHADER_READ(DXBC4_SNORM);
		CAN_SHADER_READ(DXBC5_UNORM);
		CAN_SHADER_READ(DXBC5_SNORM);
		CAN_SHADER_READ(DXBC6H_UFLOAT);
		CAN_SHADER_READ(DXBC6H_SFLOAT);
		CAN_SHADER_READ(DXBC7_UNORM);
		CAN_SHADER_READ(DXBC7_SRGB);

		// INT formts have a subscript 8 which says
		// "Support for this pixel format varies by device. Query the depth24Stencil8PixelFormatSupported property of MTLDevice to determine support"
		// which is a typo and there is no actual way of asking the device, I think they are supported on all devices
		// as per the main table and the subsript 8 is a lie, it might be a 6.
		CAN_SHADER_READ(R8_UINT);
		CAN_SHADER_READ(R8_SINT);
		CAN_SHADER_READ(R8G8_UINT);
		CAN_SHADER_READ(R8G8_SINT);
		CAN_SHADER_READ(R16_UINT);
		CAN_SHADER_READ(R16_SINT);
		CAN_SHADER_READ(R8G8B8A8_UINT);
		CAN_SHADER_READ(R8G8B8A8_SINT);
		CAN_SHADER_READ(R16G16_UINT);
		CAN_SHADER_READ(R16G16_SINT);
		CAN_SHADER_READ(R32_UINT);
		CAN_SHADER_READ(R32_SINT);
		CAN_SHADER_READ(R16G16B16A16_UINT);
		CAN_SHADER_READ(R16G16B16A16_SINT);
	};

	if( [pRenderer->pDevice supportsFeatureSet: MTLFeatureSet_macOS_GPUFamily1_v2]) {
	}
	if( [pRenderer->pDevice supportsFeatureSet: MTLFeatureSet_macOS_GPUFamily1_v3]) {
	}
	if( [pRenderer->pDevice supportsFeatureSet: MTLFeatureSet_macOS_GPUFamily1_v4]) {
	}
	if( [pRenderer->pDevice supportsFeatureSet: MTLFeatureSet_macOS_GPUFamily2_v1]) {
	}
	if( [pRenderer->pDevice supportsFeatureSet: MTLFeatureSet_macOS_ReadWriteTextureTier2]) {
	}
	MTLReadWriteTextureTier rwTextureTier = [pRenderer->pDevice readWriteTextureSupport];
	// intentional fall through on this switch
	switch(rwTextureTier) {
	default:
	case MTLReadWriteTextureTier2:
		CAN_SHADER_WRITE(R32G32B32A32_SFLOAT);
		CAN_SHADER_WRITE(R32G32B32A32_UINT);
		CAN_SHADER_WRITE(R32G32B32A32_SINT);
		CAN_SHADER_WRITE(R16G16B16A16_SFLOAT);
		CAN_SHADER_WRITE(R16G16B16A16_UINT);
		CAN_SHADER_WRITE(R16G16B16A16_SINT);
		CAN_SHADER_WRITE(R8G8B8A8_UNORM);
		CAN_SHADER_WRITE(R8G8B8A8_UINT);
		CAN_SHADER_WRITE(R8G8B8A8_SINT);
		CAN_SHADER_WRITE(R16_SFLOAT);
		CAN_SHADER_WRITE(R16_UINT);
		CAN_SHADER_WRITE(R16_SINT);
		CAN_SHADER_WRITE(R8_UNORM);
		CAN_SHADER_WRITE(R8_UINT);
		CAN_SHADER_WRITE(R8_SINT);
	case MTLReadWriteTextureTier1:
		CAN_SHADER_WRITE(R32_SFLOAT);
		CAN_SHADER_WRITE(R32_UINT);
		CAN_SHADER_WRITE(R32_SINT);
	case MTLReadWriteTextureTierNone: break;
	}



	CAN_SHADER_READ(R32G32_UINT);
	CAN_SHADER_READ(R32G32_SINT);
	CAN_SHADER_READ(R32G32B32A32_UINT);
	CAN_SHADER_READ(R32G32B32A32_SINT);

	#else
	CAN_SHADER_READ(R4G4B4A4_UNORM_PACK16)
		CAN_SHADER_READ(R5G6B5_UNORM_PACK16)
		CAN_SHADER_READ(R5G5B5A1_UNORM_PACK16)

	CAN_SHADER_READ(R8_SRGB)
	CAN_SHADER_READ(R8G8_SRGB)
		CAN_SHADER_READ(PVR_2BPP_UNORM_BLOCK)
		CAN_SHADER_READ(PVR_2BPPA_UNORM_BLOCK)
		CAN_SHADER_READ(PVR_4BPP_UNORM_BLOCK)
		CAN_SHADER_READ(PVR_4BPPA_UNORM_BLOCK)
		CAN_SHADER_READ(PVR_2BPP_SRGB_BLOCK)
		CAN_SHADER_READ(PVR_2BPPA_SRGB_BLOCK)
		CAN_SHADER_READ(PVR_4BPP_SRGB_BLOCK)
		CAN_SHADER_READ(PVR_4BPPA_SRGB_BLOCK)
		CAN_SHADER_READ(ETC2_R8G8B8_UNORM_BLOCK)
		CAN_SHADER_READ(ETC2_R8G8B8A1_UNORM_BLOCK)
		CAN_SHADER_READ(ETC2_R8G8B8A8_UNORM_BLOCK)
		CAN_SHADER_READ(ETC2_R8G8B8_SRGB_BLOCK)
		CAN_SHADER_READ(ETC2_R8G8B8A1_SRGB_BLOCK)
		CAN_SHADER_READ(ETC2_R8G8B8A8_SRGB_BLOCK)
		CAN_SHADER_READ(EAC_R11_UNORM_BLOCK)
		CAN_SHADER_READ(EAC_R11G11_UNORM_BLOCK)
		CAN_SHADER_READ(EAC_R11_SNORM_BLOCK)
		CAN_SHADER_READ(EAC_R11G11_SNORM_BLOCK)
		CAN_SHADER_READ(ASTC_4x4_UNORM_BLOCK)
		CAN_SHADER_READ(ASTC_4x4_SRGB_BLOCK)
		CAN_SHADER_READ(ASTC_5x4_UNORM_BLOCK)
		CAN_SHADER_READ(ASTC_5x4_SRGB_BLOCK)
		CAN_SHADER_READ(ASTC_5x5_UNORM_BLOCK)
		CAN_SHADER_READ(ASTC_5x5_SRGB_BLOCK)
		CAN_SHADER_READ(ASTC_6x5_UNORM_BLOCK)
		CAN_SHADER_READ(ASTC_6x5_SRGB_BLOCK)
		CAN_SHADER_READ(ASTC_6x6_UNORM_BLOCK)
		CAN_SHADER_READ(ASTC_6x6_SRGB_BLOCK)
		CAN_SHADER_READ(ASTC_8x5_UNORM_BLOCK)
		CAN_SHADER_READ(ASTC_8x5_SRGB_BLOCK)
		CAN_SHADER_READ(ASTC_8x6_UNORM_BLOCK)
		CAN_SHADER_READ(ASTC_8x6_SRGB_BLOCK)
		CAN_SHADER_READ(ASTC_8x8_UNORM_BLOCK)
		CAN_SHADER_READ(ASTC_8x8_SRGB_BLOCK)
		CAN_SHADER_READ(ASTC_10x5_UNORM_BLOCK)
		CAN_SHADER_READ(ASTC_10x5_SRGB_BLOCK)
		CAN_SHADER_READ(ASTC_10x6_UNORM_BLOCK)
		CAN_SHADER_READ(ASTC_10x6_SRGB_BLOCK)
		CAN_SHADER_READ(ASTC_10x8_UNORM_BLOCK)
		CAN_SHADER_READ(ASTC_10x8_SRGB_BLOCK)
		CAN_SHADER_READ(ASTC_10x10_UNORM_BLOCK)
		CAN_SHADER_READ(ASTC_10x10_SRGB_BLOCK)
		CAN_SHADER_READ(ASTC_12x10_UNORM_BLOCK)
		CAN_SHADER_READ(ASTC_12x10_SRGB_BLOCK)
		CAN_SHADER_READ(ASTC_12x12_UNORM_BLOCK)
		CAN_SHADER_READ(ASTC_12x12_SRGB_BLOCK)
#endif
#undef CAN_SHADER_READ
}
